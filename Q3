;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file
            
;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------
RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer


;-------------------------------------------------------------------------------
; Main loop here
;-------------------------------------------------------------------------------
;Store the values in R4, R5, R6
			mov.b #0ABC1h, R4;
			mov.b #00010h, R5;
			mov.b #00001h, R6;
			mov.b #00005h, R9; ;set R9 with an initail value

;and operation
			and R6,R4;
			and R6,R5;

;compare R4&R6 jkl
			cmp R4,R6;
			jeq YesR4ER6; ;R4=R6 then look at R5
			jmp R4NotEqualR6; ;R4 ~= R6 look at R5
                                            
YesR4ER6:
			cmp R5,R6;
			jeq YesR5ER6; ;if R5 and R4 are 1 then store value in R9
			jmp OneEqual  ;if R4 has 1 jump to OneEqual
			jmp $;

R4NotEqualR6:

			cmp R5,R6
			jeq OneEqual  ;if R5=R6,but notR4 then junp to OneEqual
			jmp $;

YesR5ER6:
			mov.w #0FF0h,R9  ;move value into R9
			jmp $;
			NOP;


OneEqual:

			inv.w R9 ;invert value in R9
			mov.w R9,R10 ; stores inverted R9 to R10
;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect   .stack
            
;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
            
